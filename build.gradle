/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/current/userguide/tutorial_java_projects.html
 */
buildscript {
    ext {}

    repositories {
        jcenter()
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath ("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath ("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeGradlePluginVersion}")
//        classpath ("com.bmuschko:gradle-docker-plugin:latest.release")
    }
}


//---------------------------------------------------------------------------//
apply from: "${rootDir}/config/sonar.gradle"

//---------------------------------------------------------------------------//
allprojects {

    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "idea"

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }

        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-milestone" }

        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/snapshot" }

    }

} // allprojects

//---------------------------------------------------------------------------//
subprojects {

    apply plugin: "io.spring.dependency-management"

    /**
     * https://docs.gradle.org/current/userguide/project_reports_plugin.html
     * taskReport
     * propertyReport
     * dependencyReport
     * htmlDependencyReport
     * --> projectReports
     */
    apply plugin: "project-report"
    check.dependsOn projectReport

    // Utils:
        apply from: "${rootDir}/config/utils.gradle"

    // Code Coverage:
        apply from: "${rootDir}/config/codecoverage.gradle"

    // https://github.com/kt3k/coveralls-gradle-plugin
    //    apply plugin: "com.github.kt3k.coveralls"

        apply from: "${rootDir}/config/findbugs.gradle"

    // PMD:
        apply from: "${rootDir}/config/pmd.gradle"

    // CPD:
//        apply from: "${rootDir}/config/cpd.gradle"

    // CheckStyle:
    //apply from: "${rootDir}/config/checkstyle.gradle"

    // lintGradle:
    //    apply from: "${rootDir}/config/lint.gradle"

    // Build Scan:
    //    apply from: "${rootDir}/config/buildscan.gradle"

    //-----------------------------------------------------------------------//
    dependencyManagement {
        imports {
//            mavenBom("io.spring.platform:platform-bom:${springIoVersion}")
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    /**
     * ResolutionStrategy to override a dependency globally
     * https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html#org.gradle.api.artifacts.ResolutionStrategy:force%28java.lang.Object[]%29
     */
    configurations.all {
        resolutionStrategy.force "com.google.guava:guava:${guavaVersion}", "net.sourceforge.htmlunit:htmlunit:latest.release"
    }


    /**
     * To view dependency tree in gradle:
     *
     * ./gradlew dependencies
     * gradle dependencies
     */
    dependencies {

        //-----------------------------------------------------------------------//
        compile ("org.aspectj:aspectjweaver")
        //-----------------------------------------------------------------------//

        // Tools
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-actuator-docs")
        compile("org.springframework.boot:spring-boot-configuration-processor")

        runtime("org.springframework.boot:spring-boot-devtools")



        // Testing
        testCompile("org.springframework.boot:spring-boot-starter-test")

    } // dependencies


    /**
     * Speed up the build process to create a jar quickly:
     * gradle test -Pfast
     * gradle check -Pfast
     *
     * Instead of omitting each one:
     * <pre>gradle build -x checkstyle -x pmd -x findbugs -x test</pre>
     *
     * TODO: Revisit:
     * project.tasks["sonarqube"].dependsOn "anotherTask"
     */
    if (project.hasProperty("fast")) {
        gradle.startParameter.excludedTaskNames += ["checkstyleMain",
                                                    "checkstyleTest",
                                                    "pmdMain",
                                                    "findbugsMain",
                                                    "projectReport"]
    }


    //-----------------------------------------------------------------------//
    // Testing Configuration:

    /**
     * Now a Jenkins job can use:
     * gradle -PignoreTestFailures=true test
     * and not fail the build base on unit test failure.
     */
    if (!ext.has("ignoreTestFailures")) {
        ext.ignoreTestFailures = false
    }

    test {
        ignoreFailures = project.ext.ignoreTestFailures
        //maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        maxParallelForks = Runtime.runtime.availableProcessors()
        forkEvery = 100
//        debug = true


        testLogging {
            showCauses true
            showExceptions true
            showStackTraces true

            events "failed"
            exceptionFormat "full"
        }


        reports.html.enabled = true
        reports.junitXml.enabled = true
    }

    /**
     * https://guides.gradle.org/performance/
     */
    tasks.withType(JavaCompile) {
        options.incremental = true
        options.fork = true
    }

    /**
     * This needs to be moved to each submodule's build.gradle:
     */
    jar {
        baseName = "${rootProject.name}"
        version =  "${rootProject.version}"

//        manifest {
//            attributes(
//                    "Main-Class": "com.baselogic.cloud.Application"
//            )
//        }
    }

    /*task("execJar", type:Jar, dependsOn: "jar") {
        baseName = "${rootProject.name}"
        version =  "${this.version}"
        classifier = "exec"
        from sourceSets.main.output
    }*/


} // subprojects
//---------------------------------------------------------------------------//

/**
 * https://docs.gradle.org/current/userguide/eclipse_plugin.html
 *
 * To create eclispe workspace:
 * ./gradlew eclipse
 *
 * To remove all workspace files:
 * ./gradlew cleanEclipse
 */
eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

/**
 * Gradle Plugin:
 * https://docs.gradle.org/current/userguide/idea_plugin.html
 *
 * https://docs.gradle.org/4.1/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
 *
 */
//    apply plugin: "idea"
// Due to Gradle 4.x changes (separate output directories per JVM language)
// Idea developers refuse to reuse Gradle classpath and use own "out/" directory.
// Revert to old behavior to allow Spring Devtool to work with using fast Idea compiler.
// https://youtrack.jetbrains.com/issue/IDEA-175172
// Alternatively use native Gradle builds or bootRun.addResources = true
// To use this feature push Ctrl+Shift+F9 to recompile!
// Be aware that Idea put resources into classes/ directory!!
//    idea.module.inheritOutputDirs = false
//    idea.module.outputDir = sourceSets.main.output.classesDir
//    idea.module.testOutputDir = sourceSets.test.output.classesDir
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        outputDir file("build/classes/main")
        testOutputDir file("build/classes/test")
    }
}

// TODO: Add ./out to the clean
//clean{
//    delete "out"
//}



//---------------------------------------------------------------------------//
/*
buildScan {
// Uncomment the lines below to agree to the Terms of Service.
    licenseAgreementUrl = "https://gradle.com/terms-of-service"
    licenseAgree = "yes"
    tag "JBCP"
    link "BitBucket", "https://bitbucket.org/mickknutson/jbcpcalendar"
}

buildScanRecipes {
  recipes "git-status", "travis-ci", "disk-usage", "gc-stats"
  recipe "git-commit", baseUrl: "https://github.com/ben-manes/caffeine/tree"
}
*/


//---------------------------------------------------------------------------//
// The End...
//---------------------------------------------------------------------------//
