/**
 * https://github.com/bmuschko/gradle-docker-plugin
 *
 * TODO: Revisit:
 * https://github.com/sgornostal/gradle-docker-plugin
 */
buildscript {
    ext{}
    repositories {
        jcenter()
    }
    dependencies {
//        classpath "com.github.jengelman.gradle.plugins:gradle-processes:latest.release"
        classpath( "com.bmuschko:gradle-docker-plugin:latest.release" )
    }
}

apply plugin: "application"

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: com.bmuschko.gradle.docker.DockerJavaApplicationPlugin

// import task classes

//---------------------------------------------------------------------------//

// TODO: Can these be defined locally?

def fromImage = "openjdk:8-jre-alpine"
def maintainerEmail = "Mick Knutson <mknutson@baselogic.io>"

def projectTag = "jbcpcalendar"
def jarTag = "jbcpcalendar"
def containerName = "mickknutson/${project.name}"
def imageName = "mickknutson/${project.name}"

def exposePorts = [8080, 8443]
def exposeBindings = ["80:8080", "443:8443"]
def imageTag = "mickknutson/${project.name}:${this.version}"


//---------------------------------------------------------------------------//

//---------------------------------------------------------------------------//

/**
 * Docker Configuration
 *
 * https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes#removing-containers
 *
 * gradle clean dockerBuildImage -Pfast
 *
 * To verify the Docker image:
 * docker images
 *
 * docker run --name jbcpcalendar-client -p 8888:8888 -t mickknutson/jbcpcalendar-client
 * docker run --name jbcpcalendar-client -p 8888:8888 -t mickknutson/jbcpcalendar-client:4.16
 *
 * --> Remove Container
 * docker stop $(docker ps -a -q)
 * docker rm $(docker ps -a -q)
 *
 * or:
 * docker rm /jbcpcalendar-client
 *
 *
 * --> Remove Image
 * docker rmi $(docker images -a -q -f)
 *
 * or:
 * docker rmi mickknutson/jbcpcalendar-client
 *
 * or
 * docker rmi [image name] -f
 *
 *
 * --> To push:
 * docker push mickknutson/jbcpcalendar-client:latest
 *
 */
/*
docker run \
  --name="jbcpcalendar-client" \
  -p 8888:8888 \
  --network="bridge" \
  --detach \
  -e "OAUTH_URL=http://$(ifconfig en0 | awk '/ *inet /{print $2}'):8080" \
  -t mickknutson/jbcpcalendar-client:latest && \


-v /var/www


docker logs jbcpcalendar --tail="0" --follow

  -e "http://$(ifconfig en0 | awk '/ *inet /{print $2}'):8080" \
*/

dockerDistTar {

    instruction {'RUN ls -la'}
    projectTag = (project.path).substring((project.path).lastIndexOf(':')+1)
    environmentVariable ('projectTag', "${projectTag}")
    instruction {"ADD app-lib/${jarTag}-*.jar /${jarTag}.jar"}

    instruction {"RUN rm -rf ${projectTag}"}

//    instruction {'RUN ls -la ./chapter*/bin/'}
    instruction {"RUN sh -c 'touch ./${jarTag}.jar'"}
    instruction {'RUN ls -la'}

    environmentVariable ('JAVA_OPTS', '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap')
//    environmentVariable ('OAUTH_URL_TEST', "\"http://MUST GET ACTUAL IP:8080\"")
//    environmentVariable ('OAUTH_URL', "http://\$(ifconfig en0 | awk '/ *inet /{print \$2}'):8080")


//    instruction {"ENTRYPOINT ./${projectTag}/bin/${projectTag}"}
    instruction {"ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar ./${jarTag}.jar"}

}

/**
 * Can I put this into sub projects?
 */
docker {
//    url = 'https://192.168.59.103:2376'
//    certPath = new File(System.properties['user.home'], '.boot2docker/certs/boot2docker-vm')

//    registryCredentials {
//        url = 'https://index.docker.io/v1/'
//        username = 'mickknutson'
//        password = 'pwd'
//        email = 'mickknutson@gmail.com'
//    }

    javaApplication {
        baseImage fromImage
        maintainer = maintainerEmail
        ports = exposePorts
        tag = imageTag
        imageName = imageName
//        imageId = imageName


        // Not sure why to use this, as this does not work
        exec {
//            defaultCommand "server"
            // Linux:
//             entryPoint "./${projectTag}/bin/${projectTag}"
//            entryPoint "java -Djava.security.egd=file:/dev/./urandom -jar ./${jarTag}.jar"
//            entryPoint "java -jar ./${jarTag}.jar"
        }
    }
}


//---------------------------------------------------------------------------//

/**
 * gradle buildImage -Pfast -s
 */
task listDocker(dependsOn: [dockerBuildImage]) {

    println "----------------------------------\n" +
            "fromImage = $fromImage\n" +
            "maintainerEmail = $maintainerEmail\n" +
            "\n" +
            "projectTag = $projectTag\n" +
            "jarTag = $jarTag\n" +
            "containerName = $containerName\n" +
            "imageName = $imageName\n" +
            "\n" +
            "exposePorts = $exposePorts\n" +
            "exposeBindings = $exposeBindings\n" +
            "imageTag = $imageTag\n" +
            "----------------------------------\n"

////    inputDir = file("$projectDir/docker")
//    inputDir = file(".")
//
//    tag = "${imageTag}"
//    imageId = "${imageName}"
//    imageName = "${imageName}"
}

/**
 * gradle createContainer -Pfast -s
 */
task createContainer(type: DockerCreateContainer, dependsOn: [listDocker, dockerBuildImage]) {

    targetImageId { dockerBuildImage.getImageId() }

    containerId = "FUCKYOU"
    containerName = "FUCKYOU"

    portBindings = exposeBindings

//    doFirst{ // doFirst required! #319
//        links = [ "${createDBContainer.getContainerId()}:database" ] // `database` there will be host used by application to DB connect
//    }

    // If you use Systemd in containers you should also add lines: (#320):
    binds = [ '/sys/fs/cgroup': '/sys/fs/cgroup' ]
    tty = true
}

/**
 * gradle clean startContainer -Pfast -s
 */
task startContainer(type: DockerStartContainer, dependsOn: [createContainer]) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
//    containerName = containerTag
//    onError { exception ->
//        if (!exception.message.contains('No such container')){ // ignore exception if container does not exist otherwise throw it
//            throw exception
//        } else {
//            removeContainer.targetContainerId { createContainer.getContainerId() }
//        }
//    }
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId { createContainer.getContainerId() }
}


task removeContainer(type: DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId { createContainer.getContainerId() }
}

task removeImage(type: DockerRemoveImage) {
//    dependsOn removeContainer
    targetImageId { "${imageName}" }
}

/**
 * gradle clean dockerfile -Pfast -s
 */
//task buildDockerfile(type: Dockerfile) {
//    imageName = "${imageName}"
//
//    tag "${this.version}"
//}


/**
 * gradle pushImage -Pfast -s
 */
//task pushImage(type: DockerPushImage) {
//    dependsOn dockerBuildImage
//    imageName = "${imageName}"
//
//    tag "${this.version}"
//}


//---------------------------------------------------------------------------//

/**
 * Iterative tasks are things like DockerBuildImage, DockerLogsContainer, DockerListImages
 *
 * gradle dockerLogsContainer
 * gradle dockerListImages
 */
task logContainer(type: DockerLogsContainer) {
    targetContainerId { "container-that-does-exist" }
    follow = true
    tailAll = true
    onNext { message ->
        // each log message from the container will be passed as it's made available
        logger.quiet message.toString()
    }
}
task logImage(type: DockerListImages) {
    onNext { message ->
        // each log message from the container will be passed as it's made available
        logger.quiet message.toString()
    }
}


dockerBuildImage.dependsOn bootRepackage
